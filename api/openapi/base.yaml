components:
  schemas:
    ArtifactState:
      description: |2-
         - PENDING: A state indicating that the artifact may exist.
         - LIVE: A state indicating that the artifact should exist, unless something
        external to the system deletes it.
         - MARKED_FOR_DELETION: A state indicating that the artifact should be deleted.
         - DELETED: A state indicating that the artifact has been deleted.
         - ABANDONED: A state indicating that the artifact has been abandoned, which may be
        due to a failed or cancelled execution.
         - REFERENCE: A state indicating that the artifact is a reference artifact. At
        execution start time, the orchestrator produces an output artifact for
        each output key with state PENDING. However, for an intermediate
        artifact, this first artifact's state will be REFERENCE. Intermediate
        artifacts emitted during a component's execution will copy the REFERENCE
        artifact's attributes. At the end of an execution, the artifact state
        should remain REFERENCE instead of being changed to LIVE.

        See also: ml-metadata Artifact.State
      default: UNKNOWN
      enum:
        - UNKNOWN
        - PENDING
        - LIVE
        - MARKED_FOR_DELETION
        - DELETED
        - ABANDONED
        - REFERENCE
      type: string
    BaseArtifact:
      allOf:
        - $ref: "#/components/schemas/BaseArtifactCreate"
        - $ref: "#/components/schemas/BaseResource"
    BaseArtifactCreate:
      allOf:
        - $ref: "#/components/schemas/BaseArtifactUpdate"
        - $ref: "#/components/schemas/BaseResourceCreate"
    BaseArtifactUpdate:
      allOf:
        - $ref: "#/components/schemas/BaseResourceUpdate"
        - type: object
          properties:
            uri:
              description: |-
                The uniform resource identifier of the physical artifact.
                May be empty if there is no physical artifact.
              type: string
            state:
              $ref: "#/components/schemas/ArtifactState"
    BaseExecution:
      allOf:
        - $ref: "#/components/schemas/BaseExecutionCreate"
        - $ref: "#/components/schemas/BaseResource"
    BaseExecutionCreate:
      allOf:
        - $ref: "#/components/schemas/BaseExecutionUpdate"
        - $ref: "#/components/schemas/BaseResourceCreate"
    BaseExecutionUpdate:
      allOf:
        - type: object
          properties:
            lastKnownState:
              $ref: "#/components/schemas/ExecutionState"
        - $ref: "#/components/schemas/BaseResourceUpdate"
    BaseModel:
      allOf:
        - $ref: "#/components/schemas/BaseResource"
        - type: object
          properties:
            provider:
              type: string
              description: Name of the organization or entity that provides the model.
              example: IBM
            longDescription:
              type: string
              description: Longer description of the model.
            logo:
              type: string
              format: uri
              description: |-
                URL to the model's logo. A [data
                URL](https://developer.mozilla.org/en-US/docs/Web/URI/Schemes/data)
                is recommended.
            license:
              type: string
              description: Short name of the model's license.
              example: apache-2.0
            licenseLink:
              type: string
              format: uri
              description: URL to the license text.
            libraryName:
              type: string
              example: transformers
    BaseModelArtifact:
      allOf:
        - $ref: "#/components/schemas/BaseResourceDates"
        - type: object
          properties:
            modelFormatName:
              description: Name of the model format.
              type: string
            modelFormatVersion:
              description: Version of the model format.
              type: string
            uri:
              type: string
              description: Artifact URI.
              format: uri
    BaseModelVersion:
      allOf:
        - $ref: "#/components/schemas/BaseResourceDates"
        - type: object
          properties:
            name:
              type: string
              description: Name of the model version.
              example: granite-3.1-8b-base
            description:
              type: string
              description: Short description of the model version.
            longDescription:
              type: string
              description: Longer description of the model version.
            readme:
              type: string
              description: Model documentation in Markdown.
            maturity:
              type: string
              description: Maturity level of the model.
              example: Generally Available
    BaseResource:
      allOf:
        - $ref: "#/components/schemas/BaseResourceCreate"
        - type: object
          properties:
            id:
              description: The unique server generated id of the resource.
              type: string
        - $ref: "#/components/schemas/BaseResourceDates"
    BaseResourceCreate:
      allOf:
        - $ref: "#/components/schemas/BaseResourceUpdate"
        - type: object
          properties:
            name:
              description: |-
                The client provided name of the artifact. This field is optional. If set,
                it must be unique among all the artifacts of the same artifact type within
                a database instance and cannot be changed once set.
              type: string
    BaseResourceDates:
      type: object
      properties:
        createTimeSinceEpoch:
          format: int64
          description: Output only. Create time of the resource in millisecond since epoch.
          type: string
          readOnly: true
        lastUpdateTimeSinceEpoch:
          format: int64
          description: |-
            Output only. Last update time of the resource since epoch in millisecond
            since epoch.
          type: string
          readOnly: true
    BaseResourceList:
      required:
        - nextPageToken
        - pageSize
        - size
      type: object
      properties:
        nextPageToken:
          description: Token to use to retrieve next page of results.
          type: string
        pageSize:
          format: int32
          description: Maximum number of resources to return in the result.
          type: integer
        size:
          format: int32
          description: Number of items in result list.
          type: integer
    BaseResourceUpdate:
      type: object
      properties:
        customProperties:
          description: User provided custom properties which are not defined by its type.
          type: object
          additionalProperties:
            $ref: "#/components/schemas/MetadataValue"
        description:
          description: |-
            An optional description about the resource.
          type: string
        externalId:
          description: |-
            The external id that come from the clientsâ€™ system. This field is optional.
            If set, it must be unique among all resources within a database instance.
          type: string
    ExecutionState:
      description: |-
        The state of the Execution. The state transitions are
          NEW -> RUNNING -> COMPLETE | CACHED | FAILED | CANCELED
        CACHED means the execution is skipped due to cached results.
        CANCELED means the execution is skipped due to precondition not met. It is
        different from CACHED in that a CANCELED execution will not have any event
        associated with it. It is different from FAILED in that there is no
        unexpected error happened and it is regarded as a normal state.

        See also: ml-metadata Execution.State
      default: UNKNOWN
      enum:
        - UNKNOWN
        - NEW
        - RUNNING
        - COMPLETE
        - FAILED
        - CACHED
        - CANCELED
      type: string
    MetadataBoolValue:
      description: A bool property value.
      type: object
      required:
        - metadataType
        - bool_value
      properties:
        bool_value:
          type: boolean
        metadataType:
          type: string
          example: MetadataBoolValue
          default: MetadataBoolValue
    MetadataDoubleValue:
      description: A double property value.
      type: object
      required:
        - metadataType
        - double_value
      properties:
        double_value:
          format: double
          type: number
        metadataType:
          type: string
          example: MetadataDoubleValue
          default: MetadataDoubleValue
    MetadataIntValue:
      description: An integer (int64) property value.
      type: object
      required:
        - metadataType
        - int_value
      properties:
        int_value:
          format: int64
          type: string
        metadataType:
          type: string
          example: MetadataIntValue
          default: MetadataIntValue
    MetadataProtoValue:
      description: A proto property value.
      type: object
      required:
        - metadataType
        - type
        - proto_value
      properties:
        type:
          description: url describing proto value
          type: string
        proto_value:
          description: Base64 encoded bytes for proto value
          type: string
        metadataType:
          type: string
          example: MetadataProtoValue
          default: MetadataProtoValue
    MetadataStringValue:
      description: A string property value.
      type: object
      required:
        - metadataType
        - string_value
      properties:
        string_value:
          type: string
        metadataType:
          type: string
          example: MetadataStringValue
          default: MetadataStringValue
    MetadataStructValue:
      description: A struct property value.
      type: object
      required:
        - metadataType
        - struct_value
      properties:
        struct_value:
          description: Base64 encoded bytes for struct value
          type: string
        metadataType:
          type: string
          example: MetadataStructValue
          default: MetadataStructValue
    MetadataValue:
      oneOf:
        - $ref: "#/components/schemas/MetadataIntValue"
        - $ref: "#/components/schemas/MetadataDoubleValue"
        - $ref: "#/components/schemas/MetadataStringValue"
        - $ref: "#/components/schemas/MetadataStructValue"
        - $ref: "#/components/schemas/MetadataProtoValue"
        - $ref: "#/components/schemas/MetadataBoolValue"
      discriminator:
        propertyName: metadataType
        mapping:
          MetadataBoolValue: "#/components/schemas/MetadataBoolValue"
          MetadataDoubleValue: "#/components/schemas/MetadataDoubleValue"
          MetadataIntValue: "#/components/schemas/MetadataIntValue"
          MetadataProtoValue: "#/components/schemas/MetadataProtoValue"
          MetadataStringValue: "#/components/schemas/MetadataStringValue"
          MetadataStructValue: "#/components/schemas/MetadataStructValue"
      description: A value in properties.
      example:
        string_value: my_value
        metadataType: MetadataStringValue
